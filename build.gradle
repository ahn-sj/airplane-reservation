plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco' // jacoco
}

jacoco {
	toolVersion = "0.8.8"
}

group = 'airplain-reservation'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5', version: '3.0.4.RELEASE'

	compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()

	finalizedBy jacocoTestReport
}

/**
 * jacoco start
 */
jacocoTestReport {
	reports {
		html.destination  file("${buildDir}/jacocoHtml")
		xml.enabled false
		csv.enabled false

//        html.destination file("src/jacoco/jacoco.html")
//        xml.destination file("src/jacoco/jacoco.xml")
	}

	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') { // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/config/*',
							'**/security/*',
							'**/dto/**',
							'**/common/domain/*',
							"**/HighestWayApplication.*"
					] + Qdomains)
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			element = 'CLASS'
			enabled = true

//			limit {
//				counter = 'LINE'
//				value = 'COVEREDRATIO'
//				minimum = 0.60
//			}
//
//			limit {
//				counter = 'METHOD'
//				value = 'COVEREDRATIO'
//				minimum = 0.60
//			}

			excludes = [
					'**/config/*',
					'**/security/*',
					'**/dto/**',
					'**/highestway/HighestWayApplication',
			] + Qdomains
		}
	}
}

task testCoverage {
	group 'verification'
	description 'Run tests with coverage'

	dependsOn('test', 'jacocoTestReport', 'jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
/**
 * jacoco end
 */
